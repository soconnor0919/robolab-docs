{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to robolab-docs","text":""},{"location":"#purpose-of-this-site","title":"Purpose of this site","text":"<p>This page aims to document work done on the NAO6 Robot throughout my CSCI 278 Independent Study, taking place in the spring of 2023.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To begin working with your NAO, set up the required software.</p> Ubuntu 22.10 <pre><code>wget https://github.com/soconnor0919/robolab-installer/archive/master.zip &amp;&amp; unzip master.zip &amp;&amp; cd robolab-installer-master &amp;&amp; bash install.sh\n</code></pre> <p>Run the above command in a terminal.</p> <p>Alternatively, start by setting up your development environment.</p>"},{"location":"references/","title":"References","text":"<p>This documentation site combines the work of many, specifically:</p> <ul> <li>Ryan Mosenkis, '22</li> <li>Cole Hausman, '23</li> <li>The Aldebaran Developers</li> </ul> <p>The page was generated using MkDocs, with the Material for MkDocs theme.</p>"},{"location":"references/#special-thanks","title":"Special Thanks","text":"<p>None of this work would be possible without the support of Professor Perrone. Thank you for all your help and guidance throughout my first year here at Bucknell.</p>"},{"location":"cpp-sdk/first-cpp-project/","title":"Creating your first C++ project","text":"<p>Now that you have the NAOqi C++ SDK installed, this tutorial will walk you through running a simple \"Hello, world!\" program.</p>"},{"location":"cpp-sdk/first-cpp-project/#setting-up-your-environment","title":"Setting up your environment","text":"<p>Start by opening up Visual Studio Code. Click \" Open Folder...\", and navigate to your worktree directory. If you used robolab-installer, this folder will be found <code>~/Documents/naoqi-cpp</code>.</p> <p>Right click within the Explorer pane (on the left side). Create a new folder, and name it <code>hello-world</code>.</p> <p></p>"},{"location":"cpp-sdk/first-cpp-project/#creating-qibuildxml","title":"Creating qibuild.xml","text":"<p>Right click on the new folder you created, and create a file named <code>qiproject.xml</code>. This file is used by qiBuild to know how to manage dependencies between the libraries your project uses. Begin by specifying the project name and maintainer. </p> qibuild.xml <pre><code>&lt;project name=\"hello-world\"&gt;\n&lt;maintainer email=\"jdoe@mycompany.com\"&gt;John Doe&lt;/maintainer&gt;\n&lt;/project&gt;\n</code></pre> <p>Note</p> <p>The name of your project directory and the project name in the file qiproject.xml do not necessarily have to be the same.</p>"},{"location":"cpp-sdk/first-cpp-project/#creating-cmakeliststxt","title":"Creating CMakeLists.txt","text":"<p>The file CMakeLists.txt is used to know how to build the source code corresponding to your project.</p> <p>Right click on your project folder again, and create a file named CMakeLists.txt. In this file, you'll specify the minimum required version of CMake, your project name, and what file to build.</p> <p>Note</p> <p>The file name is case-sensitive, so make sure you use the correct capitalization.</p> CMakeLists.txt <pre><code>cmake_minimum_required(VERSION 2.8)\nproject(hello-world)\nfind_package(qibuild)\n\nqi_create_bin(hello-world-bin \"src/main.cpp\")\n</code></pre>"},{"location":"cpp-sdk/first-cpp-project/#configuring-qibuild","title":"Configuring qiBuild","text":"<p>Now that you've specified your project information, you need to prepare qiBuild to build your project.</p> <p>Open a terminal within VS Code by opening the Command Palette (<code>Control+Shift+P</code>), and entering \"Create New Terminal\".</p> <p></p> <p>Navigate to your project directory within the terminal, then run the qiBuild configure command.</p> <pre><code>cd hello-world/\nqibuild configure --release\n</code></pre> <p>Tip</p> <p>If you get an error upon configuring qiBuild, make sure both your <code>CMakeLists.txt</code> and <code>qiproject.xml</code> files are located within your project folder.</p> <p>Upon successful configuration, there will be a build folder located within your project directory. </p>"},{"location":"cpp-sdk/first-cpp-project/#writing-your-first-program","title":"Writing your first program","text":""},{"location":"cpp-sdk/first-cpp-project/#creating-your-source-tree","title":"Creating your source tree","text":"<p>Begin your program by creating a folder called <code>src/</code> within your project folder, then creating a file named <code>main.cpp</code>. Your directory tree should look something like this:</p>"},{"location":"cpp-sdk/first-cpp-project/#writing-your-code","title":"Writing your code","text":"<p>In main.cpp, write a simple \"Hello, world!\" program.</p> main.cpp <pre><code>#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello, world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"cpp-sdk/first-cpp-project/#building-your-code","title":"Building your code","text":"<p>Click back into your terminal, and within your project directory, run the following command:</p> <pre><code>qibuild make\n</code></pre> <p>This command creates an executable file in the <code>build-myconfig/sdk/bin</code> directory.</p>"},{"location":"cpp-sdk/first-cpp-project/#running-your-code","title":"Running your code","text":"<p>Navigate to the <code>build-myconfig/sdk/bin</code> directory within your terminal.</p> <pre><code>cd build-myconfig/sdk/bin\n</code></pre> <p>Finally, execute your binary.</p> <pre><code>./hello-world-bin\n</code></pre> <p>The program should output the following:</p> <pre><code>Hello, world!\n</code></pre> <p>Congratulations! You've successfully written your first C++ program using the qiBuild framework.</p>"},{"location":"getting-started/installing-software/","title":"Installing Software","text":"<p>To start using your NAO, you first need to set up a development environment. </p> <p>There are five pieces of software you might need.</p> <ol> <li>Choregraphe IDE<ul> <li>A block-based development environment, which allows for simulation of programs.</li> </ul> </li> <li>NAOqi Python SDK<ul> <li>Python-based Software Development Kit, with access to the full NAOqi API.</li> </ul> </li> <li>NAOqi C++ SDK<ul> <li>C++-based Software Development Kit, with access to the full NAOqi API.</li> </ul> </li> <li>NAO Flasher<ul> <li>Allows the user to create a bootable USB drive in order to flash the NAO's firmware.</li> </ul> </li> <li>Robot Settings<ul> <li>Allows the user to connect to and manage the robot's settings.</li> </ul> </li> </ol>"},{"location":"getting-started/installing-software/#recommended-hardware","title":"Recommended Hardware","text":"<p>The majority of development during the semester was done on the following hardware:</p> <p></p> <p>Dell Precision 5520</p> <ul> <li>CPU: Intel i7-7820HQ</li> <li>Memory: 8GB DDR4 2400MHz</li> <li>Storage: 512GB NVMe SSD</li> <li>Graphics: NVIDIA Quadro M1200 (4GB GDDR5)  </li> </ul> <p></p> <p>Note</p> <p>The processor above is of the x86_64 architecture. Minimal testing was done on an Apple Silicon-based MacBook Pro natively, through Rosetta 2, and through Parallels Desktop, all requiring many patches for minimal progress. The rest of this guide assumes you are utilizing similar hardware to that mentioned above.</p>"},{"location":"getting-started/installing-software/#operating-system","title":"Operating System","text":"<p>Development was done using the x86_64 edition of Ubuntu 22.10, which can be downloaded from Canonical here.</p> <p>Software installation may work on future versions of Ubuntu, however installation was only tested on the version listed above.</p>"},{"location":"getting-started/installing-software/#installation-methods","title":"Installation Methods","text":"<p>Installation can be done one of two ways:</p> <ul> <li>Automatically, using the robolab-installer</li> <li>Manually, by downloading the software packages from Aldebaran<ul> <li>Official installation guides can be found here.</li> <li>Alternatively, guides can be found on this site here.</li> </ul> </li> </ul>"},{"location":"getting-started/manual-installation/","title":"Manual Installation","text":""},{"location":"getting-started/manual-installation/#installing-an-sdk","title":"Installing an SDK","text":""},{"location":"getting-started/manual-installation/#choregraphe-ide","title":"Choregraphe IDE","text":""},{"location":"getting-started/manual-installation/#downloading-choregraphe","title":"Downloading Choregraphe","text":"<p>Begin by downloading the installer from Aldebaran's website.</p> <p></p> <p>Under the Choregraphe &gt; Linux category, choose Choregraphe 2.8.x - Setup.</p>"},{"location":"getting-started/manual-installation/#installing-choregraphe","title":"Installing Choregraphe","text":"<p>After the software downloads, open your file manager and navigate to your downloads directory. Right click the background, and select \"Open in Terminal\".</p> <p></p> <p>Once in a terminal, give the installer execute permissions:</p> <pre><code>chmod +x choregraphe-suite-*.run\n</code></pre> <p>Then, run the installer.</p> <p><pre><code>./choregraphe-suite-*.run\n</code></pre> The operating system will then prompt you for your administrator password. Enter it, then follow the prompts on the Choregraphe installer. Accept the license agreement, then when given the option to choose an installation mode, choose \"Quick\".</p> <p></p> <p>Continue through the installer. Once finished, if given the option, be sure to uncheck \"Launch Choregraphe\". </p> <p></p>"},{"location":"getting-started/manual-installation/#patching-zlib","title":"Patching zlib","text":"<p>Choregraphe was developed targeting a version of Ubuntu from 2016. Because of this, we must patch a library in order for the application to launch. </p> <p>Go back to your terminal, and run the following commands.</p> <pre><code>cd /opt/choregraphe/lib/\nsudo mv libz.so.1 libz.so.1.old\nsudo ln -s /lib/x86_64-linux-gnu/libz.so.1\n</code></pre> <p>This replaces the bundled version of zlib with the version currently installed on the system.</p> <p>Choregraphe is now successfully installed. Launch it from the  Ubuntu Applications Menu.</p> <p></p> <p>Proceed to creating your first Choregraphe project.</p>"},{"location":"getting-started/manual-installation/#python-sdk","title":"Python SDK","text":""},{"location":"getting-started/manual-installation/#installing-prerequisites","title":"Installing prerequisites","text":"<p>Begin by opening a terminal. Install the required prerequisites.</p> <pre><code>sudo apt install python2.7 -y\n</code></pre>"},{"location":"getting-started/manual-installation/#downloading-the-python-sdk","title":"Downloading the Python SDK","text":"<p>Then, download the SDK package from Aldebaran's website.</p> <p></p> <p>Under the SDKs &gt; Linux category, choose SDKs 2.8.x - Python 2.7 SDK.</p>"},{"location":"getting-started/manual-installation/#extracting-the-python-sdk","title":"Extracting the Python SDK","text":"<p>Go back to your terminal, navigate to where the SDK was downloaded, and extract it. </p> <pre><code>sudo mkdir -p /opt/naoqi-python-sdk\nsudo tar -xf pynaoqi-python2.7-*.tar.gz -C /opt/naoqi-python-sdk --strip-components=1\n</code></pre>"},{"location":"getting-started/manual-installation/#updating-your-path","title":"Updating your $PATH","text":"<p>Now, we need to tell the terminal where to find the Python SDK. To do this, add the following lines to your ~/.bashrc file.</p> <pre><code>export PYTHONPATH=${PYTHONPATH}:/opt/naoqi-python-sdk/lib/python2.7/site-packages\nexport QI_SDK_PREFIX=/opt/naoqi-python-sdk\n</code></pre> <p>Tip</p> <p>An easy way to add these lines to your .bashrc without opening a text editor would be to echo the lines into the file. <pre><code>echo 'export PYTHONPATH=${PYTHONPATH}:/opt/naoqi-python-sdk/lib/python2.7/site-packages' &gt;&gt; ~/.bashrc echo 'export QI_SDK_PREFIX=/opt/naoqi-python-sdk' &gt;&gt; ~/.bashrc </code></pre></p> <p>Next, in order to tell your terminal about the new locations, source the .bashrc file.</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"getting-started/manual-installation/#verifying-installation","title":"Verifying installation","text":"<p>Let's verify the SDK is installed correctly. Open a Python prompt in your terminal.</p> <pre><code>python2.7\n</code></pre> <p>Then, import the NAOqi library.</p> <pre><code>import naoqi\n</code></pre> <p>You shouldn't see any errors. </p> <p></p> <p>If your output looks like this, installation was successful! </p> <p>Exit your Python prompt.</p> <pre><code>exit()\n</code></pre>"},{"location":"getting-started/manual-installation/#installing-visual-studio-code","title":"Installing Visual Studio Code","text":"<p>Finally, install an IDE. For this tutorial, we'll be using Visual Studio Code.</p> <p>Install VS Code from the terminal using the snap package manager.</p> <pre><code>sudo snap install code --classic\n</code></pre> <p>Then, add the Python extension to VS Code.</p> <pre><code>code --install-extension ms-python.python\n</code></pre> <p>Your development environment is now set up. Proceed to creating your first Python project.</p>"},{"location":"getting-started/manual-installation/#c-sdk","title":"C++ SDK","text":""},{"location":"getting-started/manual-installation/#installing-prerequisites_1","title":"Installing prerequisites","text":"<p>Begin by opening a terminal. Install the required prerequisites.</p> <pre><code>sudo apt install cmake python3 python3-pip -y\n</code></pre>"},{"location":"getting-started/manual-installation/#installing-qibuild","title":"Installing qiBuild","text":"<p>Next, install the qiBuild build system from the pip package manager.</p> <pre><code>pip3 install qibuild --user\n</code></pre>"},{"location":"getting-started/manual-installation/#setting-up-qibuild","title":"Setting up qiBuild","text":"<p>Now, configure qiBuild. Run the configuration wizard.</p> <pre><code>qibuild config --wizard\n</code></pre> <p>The wizard will ask you to choose a CMake generator. Choose <code>2 Unix Makefiles</code>.</p> <pre><code>:: Please choose a generator\n   1 Green Hills MULTI  (default)\n   2 Unix Makefiles\n   3 Ninja\n   4 Ninja Multi-Config\n   5 Watcom WMake\n   6 CodeBlocks - Ninja\n   7 CodeBlocks - Unix Makefiles\n   8 CodeLite - Ninja\n   9 CodeLite - Unix Makefiles\n   10 Eclipse CDT4 - Ninja\n   11 Eclipse CDT4 - Unix Makefiles\n   12 Kate - Ninja\n   13 Kate - Unix Makefiles\n   14 Sublime Text 2 - Ninja\n   15 Sublime Text 2 - Unix Makefiles\n&gt; 2\n</code></pre> <p>The wizard will then prompt you to choose an IDE. Choose <code>None</code>.</p> <pre><code>:: Please choose an IDE\n   1 None   (default)\n   2 QtCreator\n   3 Eclipse CDT\n&gt; 1\n</code></pre>"},{"location":"getting-started/manual-installation/#updating-your-path_1","title":"Updating your $PATH","text":"<p>Add qiBuild to your $PATH, by adding the following line to your .bashrc file.</p> <pre><code>PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>Tip</p> <p>An easy way to add these lines to your .bashrc without opening a text editor would be to echo the lines into the file. <pre><code>echo 'PATH=$PATH:$HOME/.local/bin' &gt;&gt; ~/.bashrc </code></pre></p> <p>Now, in order to tell your terminal about the updated $PATH, source the .bashrc file.</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"getting-started/manual-installation/#setting-up-your-worktree","title":"Setting up your worktree","text":"<p>Now, we'll set up a worktree. For this tutorial, the worktree will be located at <code>~/Documents/naoqi-cpp</code>. This can be changed, however, you'll need to remember the worktree's location.</p> <p>Start by creating the worktree directory. Go into it, and initialize the worktree.</p> <pre><code>mkdir -p ~/Documents/naoqi-cpp\ncd ~/Documents/naoqi-cpp\nqibuild init\n</code></pre>"},{"location":"getting-started/manual-installation/#downloading-the-c-sdk","title":"Downloading the C++ SDK","text":"<p>Then, download the SDK package from Aldebaran's website.</p> <p></p> <p>Under the SDKs &gt; Linux category, choose SDKs 2.8.x - C++ SDK.</p>"},{"location":"getting-started/manual-installation/#extracting-the-c-sdk","title":"Extracting the C++ SDK","text":"<p>Go back to your terminal, navigate to where the SDK was downloaded, and extract it. </p> <pre><code>sudo mkdir -p /opt/naoqi-cpp-sdk\nsudo tar -xf naoqi-sdk-*.tar.gz -C /opt/naoqi-cpp-sdk --strip-components=1\n</code></pre>"},{"location":"getting-started/manual-installation/#setting-up-the-c-sdk","title":"Setting up the C++ SDK","text":"<p>Navigate back to the worktree you created earlier, and create a toolchain from the C++ SDK.</p> <pre><code>cd ~/Documents/naoqi-cpp\nqitoolchain create mytoolchain /opt/naoqi-cpp-sdk/toolchain.xml\n</code></pre> <p>Then, add a new configuration to your toolchain.</p> <pre><code>qibuild add-config myconfig -t mytoolchain --default\n</code></pre>"},{"location":"getting-started/manual-installation/#installing-visual-studio-code_1","title":"Installing Visual Studio Code","text":"<p>Finally, install an IDE. For this tutorial, we'll be using Visual Studio Code.</p> <p>Install VS Code from the terminal using the snap package manager.</p> <pre><code>sudo snap install code --classic\n</code></pre> <p>Then, add the Python extension to VS Code.</p> <pre><code>code --install-extension ms-vscode.cpptools\n</code></pre> <p>Your development environment is now set up. Proceed to creating your first C++ project.</p>"},{"location":"getting-started/manual-installation/#other-software","title":"Other Software","text":""},{"location":"getting-started/manual-installation/#nao-flasher","title":"NAO Flasher","text":""},{"location":"getting-started/manual-installation/#downloading-nao-flasher","title":"Downloading NAO Flasher","text":"<p>Begin by downloading the installer from Aldebaran's website.</p> <p></p> <p>Under the NAO Flasher &gt; Linux category, choose NAO Flasher 2.1.x - Setup.</p>"},{"location":"getting-started/manual-installation/#extracting-nao-flasher","title":"Extracting NAO Flasher","text":"<p>Open a terminal, navigate to where the SDK was downloaded, and extract it. </p> <pre><code>sudo mkdir -p /opt/nao-flasher\nsudo tar -xvf flasher-*.tar.gz -C /opt/nao-flasher --strip-components=1\n</code></pre>"},{"location":"getting-started/manual-installation/#patching-zlib_1","title":"Patching zlib","text":"<p>NAO Flasher was developed targeting a version of Ubuntu from 2016. Because of this, we must patch a library in order for the application to launch. </p> <p>Go back to your terminal, and run the following commands.</p> <pre><code>cd /opt/nao-flasher/lib/\nsudo mv libz.so.1 libz.so.1.old\nsudo ln -s /lib/x86_64-linux-gnu/libz.so.1\n</code></pre> <p>This replaces the bundled version of zlib with the version currently installed on the system.</p>"},{"location":"getting-started/manual-installation/#add-flasher-to-applications","title":"Add Flasher to Applications","text":"<p>Now that we've extracted the flasher, we need to add a launcher to Applications.</p> <p>Start by creating the launcher file. </p> <pre><code>touch ~/.local/share/applications/nao-flasher.desktop\n</code></pre> <p>Next, add the following text to your newly created launcher.</p> <pre><code>[Desktop Entry]\nVersion=1.0\nName=NAO Flasher\nGenericName=NAO Flasher\nComment=Launches NAO Flasher\nIcon=/opt/robot_settings/share/bootconfig/icons/robot_settings.ico\nExec='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY /opt/nao-flasher/flasher'\nTerminal=false\nType=Application\nCategories=Development\nKeywords=Robot;SoftBank Robotics\n</code></pre> <p>Tip</p> <p>An easy way to add these lines to your launcher without opening a text editor would be to echo the lines into the file. <pre><code>echo \"[Desktop Entry]\nVersion=1.0\nName=NAO Flasher\nGenericName=NAO Flasher\nComment=Launches NAO Flasher\nIcon=/opt/robot_settings/share/bootconfig/icons/robot_settings.ico\nExec='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY /opt/nao-flasher/flasher'\nTerminal=false\nType=Application\nCategories=Development\nKeywords=Robot;SoftBank Robotics\" &gt; ~/.local/share/applications/nao-flasher.desktop </code></pre></p> <p>Finally, move your newly created launcher file.</p> <pre><code>sudo mv ~/.local/share/applications/nao-flasher /usr/share/applications\n</code></pre> <p>NAO Flasher is now successfully installed. Launch it from the  Ubuntu Applications Menu.</p> <p>Proceed to Flashing your NAO.</p>"},{"location":"getting-started/manual-installation/#robot-settings","title":"Robot Settings","text":""},{"location":"getting-started/manual-installation/#downloading-robot-settings","title":"Downloading Robot Settings","text":"<p>Begin by downloading the installer from Aldebaran's website.</p> <p></p> <p>Under the Robot Settings &gt; Linux category, choose Robot Settings 2.1.x - Setup.</p>"},{"location":"getting-started/manual-installation/#installing-robot-settings","title":"Installing Robot Settings","text":"<p>After the software downloads, open your file manager and navigate to your downloads directory. Right click the background, and select \"Open in Terminal\".</p> <p></p> <p>Once in a terminal, give the installer execute permissions:</p> <pre><code>chmod +x robot-settings-*.run\n</code></pre> <p>Then, run the installer.</p> <p><pre><code>./robot-settings-*.run\n</code></pre> The operating system will then prompt you for your administrator password. Enter it, then follow the prompts on the Robot Settings installer. When prompted to choose an install location, leave it at the default <code>/opt/robot_settings</code>. The installer will prompt you for your administrator password.</p> <p>When asked if you want to run the software, make sure to uncheck the box. Then, click finish.</p> <p></p>"},{"location":"getting-started/manual-installation/#patching-zlib_2","title":"Patching zlib","text":"<p>Like most Aldebaran packages, Robot Settings was developed targeting a version of Ubuntu from 2016. Because of this, we must patch a library in order for the application to launch. </p> <p>Go back to your terminal, and run the following commands.</p> <pre><code>cd /opt/robot_settings/lib/\nsudo mv libz.so.1 libz.so.1.old\nsudo ln -s /lib/x86_64-linux-gnu/libz.so.1\n</code></pre> <p>This replaces the bundled version of zlib with the version currently installed on the system.</p> <p>Robot Settings is now successfully installed. Launch it from the  Ubuntu Applications Menu.</p> <p></p>"},{"location":"getting-started/robolab-installer/","title":"Using robolab-installer","text":""},{"location":"getting-started/robolab-installer/#what-is-robolab-installer","title":"What is robolab-installer?","text":"<p>robolab-installer is a collection of scripts developed for the x86_64 edition of Ubuntu 22.10, with the aim of simplifying installation of tools required to begin using and developing software for the NAO6 robot.</p> <p>The repository for robolab-installer can be found here.</p>"},{"location":"getting-started/robolab-installer/#downloading-robolab-installer","title":"Downloading robolab-installer","text":"<p>robolab-installer can be downloaded from GitHub.</p> <p></p> <p>Once at the repository, click on the green \" Code\" dropdown, then click \"\u00a0Download ZIP\".</p>"},{"location":"getting-started/robolab-installer/#running-robolab-installer","title":"Running robolab-installer","text":"<p>Once the file is downloaded, open your file manager, navigate to your Downloads directory, and extract the folder. </p> <p>Then, open up a terminal. Navigate to the directory the file was extracted to.</p> <pre><code>$ cd ~/Downloads/robolab-installer-master\n</code></pre> <p>Next, give the installer execute permission.</p> <pre><code>$ chmod +x install.sh\n</code></pre> <p>Finally, run the installer.</p> <pre><code>$ ./install.sh\n</code></pre> <p>The installer will then ask you what software you'd like to install.</p> <p></p> <p>Tip</p> <p>You'll need to use the keyboard to navigate the installer. Use the up and down arrow keys to make your selection(s). To mark an option as selected, press the spacebar. Press enter to confirm.</p> <p>Then, you wait. The installer will take a while.</p> <p>Warning</p> <p>Don't leave yet! The installer may (at a few points) ask for your password in order to elevate permissions.</p> <p>After the installer finishes, you will see this message:</p> <p></p> <p>The installer has completed. Now, you may move on to Using your NAO.</p>"}]}